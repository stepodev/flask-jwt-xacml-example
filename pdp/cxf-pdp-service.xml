<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	you under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:cxf="http://cxf.apache.org/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sec="http://cxf.apache.org/configuration/security" xmlns:http="http://cxf.apache.org/transports/http/configuration"
	xmlns:httpj="http://cxf.apache.org/transports/http-jetty/configuration"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:core="http://cxf.apache.org/core" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
            http://cxf.apache.org/core
            http://cxf.apache.org/schemas/core.xsd
            http://cxf.apache.org/configuration/security
            http://cxf.apache.org/schemas/configuration/security.xsd
            http://cxf.apache.org/jaxrs
            http://cxf.apache.org/schemas/jaxrs.xsd
            http://cxf.apache.org/transports/http/configuration
            http://cxf.apache.org/schemas/configuration/http-conf.xsd
            http://cxf.apache.org/transports/http-jetty/configuration
            http://cxf.apache.org/schemas/configuration/http-jetty.xsd
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
            http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- <httpj:engine-factory id="ClientAuthHttpsSettings" bus="cxf"> -->
	<!-- <httpj:engine port="${testutil.ports.PdpServer}"> -->
	<!-- <httpj:tlsServerParameters> -->
	<!-- <sec:keyManagers keyPassword="stskpass"> -->
	<!-- <sec:keyStore type="jks" password="stsspass" resource="stsstore.jks" 
		/> -->
	<!-- </sec:keyManagers> -->
	<!-- <sec:trustManagers> -->
	<!-- <sec:keyStore type="jks" password="stsspass" resource="stsstore.jks" 
		/> -->
	<!-- </sec:trustManagers> -->
	<!-- <sec:clientAuthentication want="true" required="false" /> -->
	<!-- </httpj:tlsServerParameters> -->
	<!-- </httpj:engine> -->
	<!-- </httpj:engine-factory> -->

	<bean id="pdpEngineConf" class="org.ow2.authzforce.core.pdp.impl.PdpEngineConfiguration"
		factory-method="getInstance">
		<constructor-arg name="confLocation" value="pdp.xml" />
		<constructor-arg name="catalogLocation" value="catalog.xml" />
		<constructor-arg name="extensionXsdLocation" value="pdp-ext.xsd" />
	</bean>

	<bean id="apiSchemaHandler" class="org.apache.cxf.jaxrs.utils.schemas.SchemaHandler">
		<property name="catalogLocation" value="classpath:/catalog.xml" />
		<property name="schemaLocations">
			<util:list>
				<value>classpath:/xacml-core-v3-schema-wd-17.xsd</value>
			</util:list>
		</property>
	</bean>

	<!-- <bean id="callbackHandler" class="org.apache.coheigea.cxf.sts.xacml.common.CommonCallbackHandler" 
		/> -->
	<!-- <bean id="basicAuthFilter" class="org.apache.coheigea.cxf.sts.xacml.pdp.xacml2.WSS4JBasicAuthFilter"> -->
	<!-- <property name="callbackHandler" ref="callbackHandler" /> -->
	<!-- </bean> -->

	<!-- JAX-RS service supporting XML (textual) and JSON -->
	<core:bus>
		<core:properties>
			<!-- Since not using default JSON Provider, prevent it to be triggered 
				(especially when using FastInfoset instead of JSON, else there is conflict) -->
			<entry key="skip.default.json.provider.registration" value="true" />
		</core:properties>
	</core:bus>

	<!-- <jaxrs:server depends-on="ClientAuthHttpsSettings" address="https://localhost:${testutil.ports.PdpServer}/authzforce-ce"> -->
	<jaxrs:server id="tazService" address="/"
		staticSubresourceResolution="true">
		<jaxrs:serviceBeans>
			<bean class="org.ow2.authzforce.rest.pdp.jaxrs.XacmlPdpResource">
				<constructor-arg ref="pdpEngineConf" />
			</bean>
		</jaxrs:serviceBeans>
		<jaxrs:features>
			<cxf:logging />
		</jaxrs:features>
		<jaxrs:providers>
			<!-- <ref bean="basicAuthFilter" /> -->
			<bean class="org.apache.cxf.jaxrs.provider.JAXBElementProvider">
				<property name="singleJaxbContext" value="true" />
				<!-- <property name="extraClass" value="#{ T(org.ow2.authzforce.core.pdp.impl.PdpExtensions).getExtensionJaxbClasses().toArray() 
					}" /> -->
				<property name="schemaHandler" ref="apiSchemaHandler" />
			</bean>
			<bean class="org.ow2.authzforce.jaxrs.util.JsonRiJaxrsProvider">
				<!-- Provider for XACML/JSON profile support (only to be used on /pdp 
					resource) -->
				<constructor-arg name="schema"
					value="#{T(org.ow2.authzforce.xacml.json.model.Xacml3JsonUtils).REQUEST_SCHEMA}" />
				<constructor-arg name="maxJsonStringSize" value="0" />
				<constructor-arg name="maxNumOfImmediateChildren"
					value="0" />
				<constructor-arg name="maxDepth" value="0" />
			</bean>
			<bean class="org.ow2.authzforce.jaxrs.util.BadRequestExceptionMapper" />
			<bean class="org.ow2.authzforce.jaxrs.util.ClientErrorExceptionMapper" />
			<bean
				class="org.ow2.authzforce.jaxrs.util.UnsupportedOperationExceptionMapper" />
			<bean class="org.ow2.authzforce.jaxrs.util.ServerErrorExceptionMapper" />
			<bean class="org.ow2.authzforce.jaxrs.util.DefaultExceptionMapper" />
		</jaxrs:providers>
		<!-- USE Logging{In,Out}Interceptor FOR DEBUGGING ONLY -->
		<!-- <jaxrs:inInterceptors> -->
		<!-- <bean class="org.apache.cxf.interceptor.LoggingInInterceptor" /> -->
		<!-- </jaxrs:inInterceptors> -->
		<!-- <jaxrs:outInterceptors> -->
		<!-- <bean class="org.apache.cxf.interceptor.LoggingOutInterceptor" /> -->
		<!-- </jaxrs:outInterceptors> -->
	</jaxrs:server>

</beans>

